)
),
annotations = list(
list(
x = -0.0951769406393,
y = 1.06972670892,
showarrow = FALSE,
text = "Subgroup",
xref = "paper",
yref = "paper"
),
list(
x = -0.235516552511,
y = 1.07060587474,
showarrow = FALSE,
text = "Group",
xref = "paper",
yref = "paper"
),
list(
x = -0.235516552511,
y = 0.922906017856,
showarrow = FALSE,
text = "One",
xref = "paper",
yref = "paper"
),
list(
x = -0.235516552511,
y = 0.375,
showarrow = FALSE,
text = "Two",
xref = "paper",
yref = "paper"
)
)
)%>%layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
fig
fig <- fig %>% layout(
title = '',
yaxis = list(
autorange = TRUE,
categoryorder = "category descending",
domain = c(0, 1),
range = c(-0.5, 3.5),
showline = TRUE,
title = "",
type = "category"
),
margin = list(
r = 10,
t = 25,
b = 40,
l = 110
),
legend = list(
x = 0.986145833333,
y = 0.936263886049
),
shapes = list(
list(
line = list(
color = "rgba(68, 68, 68, 0.5)",
width = 1
),
type = "line",
x0 = -0.3,
x1 = 1.2,
xref = "paper",
y0 = 0.5,
y1 = 0.5,
yref = "paper"
)
),
annotations = list(
list(
x = -0.0951769406393,
y = 1.06972670892,
showarrow = FALSE,
text = "Subgroup",
xref = "paper",
yref = "paper"
),
list(
x = -0.235516552511,
y = 1.07060587474,
showarrow = FALSE,
text = "Group",
xref = "paper",
yref = "paper"
),
list(
x = -0.235516552511,
y = 0.922906017856,
showarrow = FALSE,
text = "One",
xref = "paper",
yref = "paper"
),
list(
x = -0.235516552511,
y = 0.375,
showarrow = FALSE,
text = "Two",
xref = "paper",
yref = "paper"
)
)
)%>%layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
fig
fig <- fig %>% layout(
title = '',
yaxis = list(
autorange = TRUE,
categoryorder = "category descending",
domain = c(0, 1),
range = c(-0.5, 3.5),
showline = TRUE,
title = "",
type = "category"
),
margin = list(
r = 10,
t = 25,
b = 40,
l = 110
),
legend = list(
x = 0.986145833333,
y = 0.936263886049
),
shapes = list(
list(
line = list(
color = "rgba(68, 68, 68, 0.5)",
width = 1
),
type = "line",
x0 = -0.3,
x1 = 1.2,
xref = "paper",
y0 = 0.5,
y1 = 0.5,
yref = "paper"
),
list(
line = list(
color = "rgba(68, 68, 68, 0.63)",
width = 1
),
type = "line",
x0 = -0.3,
x1 = 1.2,
xref = "paper",
y0 = 1,
y1 = 1,
yref = "paper"
)
),
annotations = list(
list(
x = -0.0951769406393,
y = 1.06972670892,
showarrow = FALSE,
text = "Subgroup",
xref = "paper",
yref = "paper"
),
list(
x = -0.235516552511,
y = 1.07060587474,
showarrow = FALSE,
text = "Group",
xref = "paper",
yref = "paper"
),
list(
x = -0.235516552511,
y = 0.922906017856,
showarrow = FALSE,
text = "One",
xref = "paper",
yref = "paper"
),
list(
x = -0.235516552511,
y = 0.375,
showarrow = FALSE,
text = "Two",
xref = "paper",
yref = "paper"
)
)
)%>%layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
fig
fig <- plot_ly(orientation='h', line=list(color='gray'), height=400, width=600)
fig <- fig %>% add_boxplot(x=c(2,3,1,5), y=c('A','A','A','A'), name='A')
fig <- fig %>% add_boxplot(x=c(8,3,6,5), y=c('B','B','B','B'), name='B')
fig <- fig %>% add_boxplot(x=c(2,3,2,5), y=c('C','C','C','C'), name='C')
fig <- fig %>% add_boxplot(x=c(7.5,3,6,4), y=c('D','D','D','D'), name='D')
fig <- fig %>% layout(
title = '',
yaxis = list(
autorange = TRUE,
categoryorder = "category descending",
domain = c(0, 1),
range = c(-0.5, 3.5),
showline = TRUE,
title = "",
type = "category"
),
margin = list(
r = 10,
t = 25,
b = 40,
l = 110
),
legend = list(
x = 0.986145833333,
y = 0.936263886049
),
shapes = list(
list(
line = list(
color = "rgba(68, 68, 68, 0.5)",
width = 1
),
type = "line",
x0 = -0.3,
x1 = 1.2,
xref = "paper",
y0 = 0.5,
y1 = 0.5,
yref = "paper"
),
list(
line = list(
color = "rgba(68, 68, 68, 0.63)",
width = 1
),
type = "line",
x0 = -0.3,
x1 = 1.2,
xref = "paper",
y0 = 1,
y1 = 1,
yref = "paper"
)
),
annotations = list(
list(
x = -0.0951769406393,
y = 1.06972670892,
showarrow = FALSE,
text = "Subgroup",
xref = "paper",
yref = "paper"
)
)
)%>%layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff')
)
fig
fig <- plot_ly(orientation='h')
i <- 1
fig <- plot_ly(orientation='h')
i <- 1
for (cat in t$comparison_labels) {
dists <- t$distances[[i]]
fig   <- fig %>% add_boxplot(x=dists,y=rep(cat,length(dists)))
i <- i + 1
}
fig
fig <- plot_ly(orientation='h')
i <- 1
for (cat in t$comparison_labels) {
dists <- t$distances[[i]]
fig   <- fig %>% add_boxplot(x=dists,y=rep(cat,length(dists)),
boxpoints = "all")
i <- i + 1
}
fig
fig <- plot_ly(orientation='h')
i <- 1
for (cat in t$comparison_labels) {
dists <- t$distances[[i]]
fig   <- fig %>% add_boxplot(x=dists,y=rep(cat,length(dists)),
boxpoints = "all",jitter = 0)
i <- i + 1
}
fig
fig <- plot_ly(orientation='h')
i <- 1
for (cat in t$comparison_labels) {
dists <- t$distances[[i]]
fig   <- fig %>% add_boxplot(x=dists,y=rep(cat,length(dists)),
boxpoints = "all",jitter = -0.3)
i <- i + 1
}
fig
fig <- plot_ly(orientation='h')
i <- 1
for (cat in t$comparison_labels) {
dists <- t$distances[[i]]
fig   <- fig %>% add_trace(x=dists,y=rep(cat,length(dists)),
boxpoints = "all",jitter = -0.3,
type = "box")
i <- i + 1
}
fig
fig <- plot_ly(orientation='h')
i <- 1
for (cat in t$comparison_labels) {
dists <- t$distances[[i]]
fig   <- fig %>% add_trace(x=dists,y=rep(cat,length(dists)),
boxpoints = "outliers",jitter = -0.3,
type = "box")
i <- i + 1
}
fig
fig
fig <- plot_ly(orientation='h')
i <- 1
for (cat in t$comparison_labels) {
dists <- t$distances[[i]]
fig   <- fig %>% add_trace(x=dists,y=rep(cat,length(dists)),
type = "scatter")
i <- i + 1
}
fig
i <- 1
for (cat in t$comparison_labels) {
dists <- t$distances[[i]]
fig   <- fig %>% add_trace(x=dists,y=rep(cat,length(dists)),
boxpoints = "outliers",
type = "box")
i <- i + 1
}
fig
fig <- plot_ly(orientation='h')
i <- 1
for (cat in t$comparison_labels) {
dists <- t$distances[[i]]
fig   <- fig %>% add_trace(x=dists,y=rep(cat,length(dists)),
boxpoints = "outliers",
type = "box")
i <- i + 1
}
fig
# Input:
# comparison_labels - vector of strings, has the name of the comparison that was done
# distances_lst     - list of vectors containing the normalised euclidean distances of the comparisons
plot_distances <- function(comparison_labels,distances_lst,
plot_width=12,plot_height=8,plot_type='svg',axis_size=16) {
fig <- plot_ly(orientation='h')
i <- 1
for (cat in comparison_labels) {
dists <- distances_lst[[i]]
fig   <- fig %>% add_trace(x=dists,y=rep(cat,length(dists)),
boxpoints = "outliers",
type = "box")
i <- i + 1
}
x <- list(title = "Normalised euclidean distance",titlefont = list(size = axis_size),
tickfont = list(size = axis_size),showgrid = F)
y <- list(tickfont = list(size = axis_size),
showgrid = F)
fig <- fig %>% layout(showlegend = FALSE,xaxis = x, yaxis = y,font="Roboto",
legend = list(font = list(size = axis_size-1)))
fig <- configFig(fig,paste0("CDspectraAvg_",strsplit(as.character(Sys.time())," ")[[1]][1]),
plot_type,plot_width,plot_height)
return(fig)
}
plot_distances(t$comparison_labels,t$distances)
plot_distances(t$comparison_labels,t$distances)
source("server_files/helpers_plotting.R")
source("server_files/plotFunctionsSpectraComparison.R")
plot_distances(t$comparison_labels,t$distances)
# Input:
# comparison_labels - vector of strings, has the name of the comparison that was done
# distances_lst     - list of vectors containing the normalised euclidean distances of the comparisons
plot_distances <- function(comparison_labels,distances_lst,
plot_width=12,plot_height=8,plot_type='svg',axis_size=16) {
fig <- plot_ly(orientation='h')
i <- 1
for (cat in comparison_labels) {
dists <- distances_lst[[i]]
fig   <- fig %>% add_trace(x=dists,y=rep(cat,length(dists)),
#boxpoints = "outliers",
type = "scatter")
i <- i + 1
}
x <- list(title = "Normalised euclidean distance",titlefont = list(size = axis_size),
tickfont = list(size = axis_size),showgrid = F)
y <- list(tickfont = list(size = axis_size),
showgrid = F)
fig <- fig %>% layout(showlegend = FALSE,xaxis = x, yaxis = y,font="Roboto",
legend = list(font = list(size = axis_size-1)))
fig <- configFig(fig,paste0("CDspectraAvg_",strsplit(as.character(Sys.time())," ")[[1]][1]),
plot_type,plot_width,plot_height)
return(fig)
}
plot_distances(t$comparison_labels,t$distances)
# Input:
# comparison_labels - vector of strings, has the name of the comparison that was done
# distances_lst     - list of vectors containing the normalised euclidean distances of the comparisons
plot_distances <- function(comparison_labels,distances_lst,
plot_style = 'boxplot',
plot_width=12,plot_height=8,plot_type='svg',axis_size=16) {
fig <- plot_ly(orientation='h')
i <- 1
for (cat in comparison_labels) {
dists <- distances_lst[[i]]
if (plot_style == 'boxplot') {
fig   <- fig %>% add_trace(x=dists,y=rep(cat,length(dists)),
boxpoints = "outliers",
type = "box")
} else {
fig   <- fig %>% add_trace(x=dists,y=rep(cat,length(dists)),
type = "scatter",
marker = list(size = 9))
}
i <- i + 1
}
x <- list(title = "Normalised euclidean distance",titlefont = list(size = axis_size),
tickfont = list(size = axis_size),showgrid = F)
y <- list(tickfont = list(size = axis_size),
showgrid = F)
fig <- fig %>% layout(showlegend = FALSE,xaxis = x, yaxis = y,font="Roboto",
legend = list(font = list(size = axis_size-1)))
fig <- configFig(fig,paste0("CDspectraAvg_",strsplit(as.character(Sys.time())," ")[[1]][1]),
plot_type,plot_width,plot_height)
return(fig)
}
plot_distances(t$comparison_labels,t$distances)
plot_distances(t$comparison_labels,t$distances,'s')
shiny::runApp()
cbind(1:5,matrix(1:10,ncol = 2))
library(shiny)
user      <- Sys.info()['user']
users_dir <- paste0("/home/",user,"/data_users/")
notebook_app  <- (Sys.info()["nodename"] == "osvaldo")
if (notebook_app) {
use_python("/usr/bin/python3")
} else  {
reticulate::use_condaenv("r-reticulate",required = TRUE)
}
# developer path
base_dir <- paste0("/home/",user,"/spc_shiny_servers/foldA_moltenP_apps/moltenprot/")
# set the corrrect path for the docker user
if (user == 'shiny') {
base_dir <- "/home/shiny/moltenprot/"
}
base_dir
user
appName     <- "PhotoMol"
user      <- Sys.info()['user']
users_dir <- paste0("/home/",user,"/data_users/")
notebook_app  <- (Sys.info()["nodename"] == "osvaldo")
if (notebook_app) {
use_python("/usr/bin/python3")
} else  {
reticulate::use_condaenv("r-reticulate",required = TRUE)
}
# developer path
base_dir <- paste0("/home/",user,"/spc_shiny_servers/refeynApp/",appName,"/")
# set the corrrect path for the docker user
if (user == 'shiny') {
base_dir <- paste0("/home/shiny/",appName,'/')
}
base_dir
x <- data.frame(y=1:10,b='b')
x
x1 <- data.frame(y=1:10,b='b')
x2 <- data.frame(y=2:5,b='sa')
x2
merge(x1,x2)
merge(x1,x2,by='y')
