#Exercise 6: Using SESCA modules in other python scripts:
#This is an example of how to incorporate modules from SESCA and HBSS 
#into other scripts to improve the utility of the package. An example 
#script (compare_spectra.py) is provided here to demonstrate the major 
#steps in the process.

#If we open the compare_spectra.py in a text editor, it will show that
#the example script is divided into five steps:

#Step 1:  shows how built-in modules in python can be normally imported.
#These modules, sys and os, should be available in any python 
#distribution, and contain functions that provide easy access to 
#functions and variables related to the operating system. In line 7 the
#getcwd() function from the os module returns the current work directory
#to test whether the import was successful.

#Step 2: Custom modules like SESCA can be imported in a similar manner as
#built-in modules, provided that the path to the module files is listed
#in the system PATH or PYTHONPATH environmental variables. In this
#script, the path to SESCA modules is determined automatically based on
#the current directory path in lines 16-18, then it is added to the
#system search path in line 21.

#After the search path is set up, the modules SESCA_main.py and
#SESCA_pred.py found in the scripts directory can be imported similarly
#to built-in modules (lines 24-25). If SESCA is installed correctly,
#calling the Import_Custom() (line 28) function from the SESCA_main.py
#imports all other necessary modules for computing CD spectra in this
#script.


#Step 3: All imported SESCA modules can be executed by calling their main
#function within a script. These functions are usually defined last in
#the module and marked by the comment "Main function", for easier access.
#In this example script we call the main function of SESCA_main.py to
#predict the CD spectra of three protein structures defined in line 34.
#To execute the analysis, we need to provide the appropriate arguments
#for SESCA, which are normally given through the command line. This is
#done through the SESCA_args variable in line 41, with only the input and 
#output file names adjusted for each execution. Note that we also
#requested the basis set HBSS-3 using the @lib flag, and asked for a low
#verbosity execution with "@verb 1".

#The white-space separated arguments are processed using the Read_Args
#function of SESCA_main in line 43, and then they are passed to the main
#function (Main.SESCA_Main), to execute the spectrum prediction.

#The results of the CD prediction are printed to the files
#Spectrum_1.out, Spectrum_2.out, and Spectrum_3.out as requested, but
#when SESCA modules are executed by another script, they also return
#the essential output data in a python array for further processing. In
#this case the output data is received in the array "Data" in line 55.
#Both SESCA_pred.py and SESCA_main.py returns a similar data structure if
#executed, with the first array (Data[0]) in the output containing the
#spectrum related data, and the second (Data[1]), contains the comparison 
#between a given reference spectrum and the prediction. Since we did not
#define a reference structure in our script, all the relevant information
#is found in Data[0]. The basis spectrum coefficients, calculated from
#the SS composition of the input protein structure, are stored in
#Data[0][0], while the calculated spectra (wavelengths vs. CD intensities)
#are stored in Data[0][1]. In this example application, the coefficients
#are added to the array "SS_comp" and the spectra to the array 
#"CD_Spectra" in lines 50-52, respectively.

#Step 4: Here the obtained spectra are compared to one another by
#calculating the root-mean-squared deviation (RMSD) of their CD
#intensities at every wavelength. This analysis is carried out by a
#function called Compare_Spectra in line 78, which was imported from the
#SESCA_pred module. The function itself can be found in lines 590-648 of
#SESCA_pred.py, and also returns an array with two main parts, the
#spectra themselves in Comparison_ik[0], and the deviations (including
#the RMSD) in Comparison_ik[1]. 


#Step5: Finally, the spectrum RMSD-s arranged in 3X3 matrix are processed
#and printed into the file "Spectrum_comparison.out". If the imports worked
#correctly, the output should show that spectra 2 and 3 are more similar to
#each other (RMSD = 3.31 kMRE) than spectra 1 and 2 (4.55 kMRE), or spectra
#1 and 3 (7.88 kMRE).
