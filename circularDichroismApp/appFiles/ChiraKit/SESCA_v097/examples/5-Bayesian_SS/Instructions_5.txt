#Exercise 5: Bayesian Secondary Structure estimation:
#Here, we analyse the CD spectrum of Immunoglobulin G (CD_igg2.dat) to
#demonstrate how the Bayesian SS estimation module works in SESCA.

#Step 1: conventional CD prediction
#First, let us predict the CD spectrum from the available protein model
#(1igt.pdb) using the command:

../../scripts/SESCA_main.py  @pdb 1igt.pdb    @ref CD_igg2.dat @refscale auto @lib DS-dTSC3 @err 2         @write CD_pred.out
#       SESCA main module    prot. structure  measured CD      scale CD       basis set     error estim.   output

#The output file (CD_pred.out) shows that the deviation (1.64 kMRE)
#between the predicted and measured CD spectra is not extraordinarily
#large, but due to the relatively weak SS signal it results in a 90%
#normalized deviation and a poor agreement in the shape of the CD spectra
#(see Spectra_1.agr).

#Step 2: Find the best fit with deconvolution
#Using SESCA_deconv, the SS composition with the smallest deviation from
#measured spectrum can be determined with:

../../scripts/SESCA_deconv.py @spect CD_igg2.dat @corr SC_calc.out   @lib ../../libs/Map_BB_DS-dTSC3.dat @write CD_deconv.out @err 2 @rep 100
# SESCA deconvolution module  CD spectrum        Side chain correct.  (backbone) basis set                output              error est. repeats

#This estimated SS composition indeed fits the spectrum much better (0.52
#kMRE), but requires a scaling factor of 1.43, suggesting that the
#protein concentration during the CD measurements was strongly
#overestimated. Because Immunoglobulin G (IgG) contains several disulphide
#bridges and large glycan structures that may interfere with CD
#measurements, it is difficult to judge whether the crystal structure or
#the deconvolution structure is more reliable.


#Step 3: Apply Bayesian estimation
#Bayesian SS estimation allows to determine the most likely SS
#composition based on the expected CD deviations in the measurements.
#This estimate is based on a weighted ensemble of possible SS
#compositions, where the weights are determined based on the likelihood
#of estimated non-SS contributions and scaling factors required to match
#the measured spectrum. A Bayesian SS estimate for IgG can be calculated
#using the following command:

../../scripts/SESCA_bayes.py @spect CD_igg2.dat @lib DS-dTSC3 @corr SC_calc.out @write Bayes_est_1.out @proj Bayes_map_1.out    @iter 250       @verb 3
# SESCA Bayesian module       CD spectrum       basis set     side chain corr.  main output file       projection  file        sampling steps  verbosity

#The main output file produced by this command is Bayes_est_1.out, which
#contains four data blocks. The first data block lists the most important
#input parameters, including the CD spectrum, the basis set, Bayesian
#parameter file, side chain correction file, as well as the initial
#number of SS compositions (100) and number of Monte Carlo Steps (250),
#which determine the total number of sampled SS compositions (25 000) the
#SS estimate is based on. The second data block contains the discrete SS
#probability distribution map. The map lists each SS composition bin by
#the SS fractions of its mid-point, and the (posterior) probability of
#the bin. The latter is calculated from the number of SS compositions
#that correspond to this bin in the probability weighted SS ensemble. The
#bins in the distribution are sorted by their posterior probabilities.
#The third data block describes the discrete probability distribution of
#scaling factors estimated for each SS compositions of the sampled
#ensemble. The fourth and final data block summarizes the estimated
#scaling factor and SS fractions, as well as their uncertainty. These
#quantities were calculated as the means and standard deviations of
#scaling factors and SS fractions in the obtained ensemble.

#Based on the obtained output, the most likely SS composition (Alpha:
#0.026, Beta: 0.296, Coil: 0.678) is close to both the SS
#composition of the crystal structure (Alpha: 0.050, Beta: 0.306, Coil:
#0.644), and the deconvolution estimate (Alpha: 0.0, Beta: 0.387, Coil:
#0.612). All three structures would fall into the top ten most populated
#bins in the SS distribution map, with the Bayesian estimate being in bin
#number 3 (0.025  0.275  0.675, P: 9.5%), the deconvolution estimate in
#bin 6 ( 0.025  0.375  0.625, P:  3.6%), and the crystal structure in bin
#9 (0.075  0.325  0.625, P: 1%).

#In this example, we also specified a second output file
#(Bayes_map_1.dat) using the @proj flag. This output file contains a
#heatmap-style projection of the posterior probability distribution along
#two SS classes (here Alpha-helix, and Beta-strand). This projection
#(Visualized in Heat_1.png) clearly shows that the most likely SS region
#contains structures with 0-5% Alpha-helix and 25-35% Beta-strand which
#agrees reasonably well with the obtained SS compositions. We note that
#by default, SESCA_bayes projects the probabilities along first two SS
#classes, but this can be changed by using the @pdim flag on the command
#line or using the #|SS project keyword in the Bayesian parameter file.
#If the user specifies a data file using the @data flag, SESCA_bayes also
#prints all SS compositions in the sampled SS ensemble, along with their
#obtained scaling factors, non-SS deviations, prior and posterior
#probabilities.


#Bayesian parameter files:
#In the example above, many vital parameters for the Bayesian SS 
#estimation were determined automatically. SESCA contains several
#Bayesian parameter files in the libs subdirectory, but the user can set
#and customize these parameters by supplying custom parameter files with
#the @par flag. When no parameter file is provided SESCA will use the
#file Bayes_2D_noSC.dat if no side chain correction is provided for the
#SS estimation, and Bayes_2D-SC.dat if side chain corrections are
#provided. Each parameter file may contain up to five data blocks to
#alter program behaviour, and omitted data blocks are replaced by
#default parameters defined in lines 60-65 of SESCA_bayes.py.

#Data blocks:
#Data blocks in the parameter files are marked by keywords, starting
#with "#|" in their first line, and end with a single "&" in their last
#line. The keywords refer to the following parameters:

#SS Dist: controls the parameters for the prior SS distribution, from
#which the initial SS composition will be drawn by rejection
#sampling. This data block may contain N-dimensional SS probability
#distributions, where N is determined by the number of basis spectra (and
#SS classes) in the basis set. Currently only the "Uni_ND", and
#"Custom_ND" type distributions (see below) are supported in this block.

#SS change: controls the size of SS composition change applied during the
#Monte Carlo (MC) sampling scheme. This will affect how efficiently
#the sampled distribution converges. This block should define a 1-
#dimensional distribution compatible with distribution types "Uniform",
#"Gauss", and "Custom_1D". It is recommended that the average change in
#the SS composition is chosen to be larger than the average bin width in
#the prior SS distribution.

#SS project: controls which SS classes are used to create 2D heatmaps if
#such a map is requested. The block should contain the keyword "SS_map"
#followed by the integers a and b. Note that these should be 0 < a <= N
#and 0 < b <= N, where N is the number basis spectra in the basis set.

#Scale Dist: controls the parameters that describe the prior probability
#distribution of scaling factors. This block is compatible with the
#distribution types "Uniform", "Gauss", and "Custom_1D". The block can be
#omitted if the NonSS Dist block defines a 2D joint probability
#distribution for both nonSS-contributions and scaling factors.

#NonSS Dist: controls the parameters that describe the 1D probability
#distribution of non-SS contributions or the joint 2D probability
#distribution of non-SS contributions and scaling factors. As such, this
#accepts distributions with types "Uniform", "Gauss", "Custom_1D" and
#"Custom_2D". Note that this block controls the likelihood of possible
#SS compositions during the MC sampling, and thus has a major effect on
#the SS estimation.

#Distribution types:
#to define the various distributions required, SESCA_bayes reads in
#probability distributions of different types, each recognized by the #keywords and subsequent boundary parameters (in parentheses) below:

#Uniform (Min,Max,Step): defines a uniform, discrete, 1-dimensional
#distribution between the boundaries Min and Max, and bin width defined
#by Step.

#Uni_ND (Dim, Min,Max,Step): defines a uniform, discrete distribution in
#Dim dimensions between the boundaries Min and Max, and bin width Step in
#every dimension.

#Gauss (mean,SD,Min,Max,Step): defines a discrete 1-dimensional normal
#distribution centred on Mean, with variance of SD, between the
#boundaries Min and Max, and bin width of Step.

#Custom_1D (Min, Max, Step): defines a discrete 1-dimensional
#distribution with boundaries between Min and Max, and bin width Step.
#Subsequent lines should contain two values: the centre point and
#assigned probability of each bin.


#Custom_2D (Min1, Max1, Step1, Min2, Max2, Step2): defines a discrete 2-
#dimensional distribution with boundaries Min1 to Max1 in one dimension,
#and Min2 to Max2 in the other. Bin widths are defined by Step1 and 
#Step2, respectively. Subsequent lines should contain three values,
#marking the centre point and assigned probability of each bin.

#Custom_ND (Dim, Min, Max, Step): defines a discrete distribution in Dim
#dimensions with boundaries Min to Max in all dimensions, and bin widths
#defined by Step. If the boundaries in various dimensions are not
#identical, the data block may contain Dim lines starting with the
#keyword Custom_ND, each defining boundaries for one particular
#dimension. Subsequent lines should contain Dim values, marking the
#centre point and assigned probability of each bin.


#Here, we provide 3 example parameter files to demonstrate their use and
#help improving the flexibility of Bayesian SS estimation. The first
#example file "Bayes_1D_example.dat". This file defines a uniform 3D
#distribution for the prior SS probabilities, and randomly chosen SS
#changes between 0.1 and 0.25. Finally, the likelihood of putative SS
#conformations are determined based on separate 1D distributions defined
#by Scale Dist and NonSS Dist. Because the distribution of scaling
#factors are defined as a uniform distribution, the likelihood of SS
#compositions is now determined solely by the non-SS contributions. These
#are defined by a 1D custom probability distribution between 0 and 6
#kMRE, with the most likely RMSD falling between 0.9 and 1.2 kMRE (bin
#1.050). Running SESCA_bayes with this file:

../../scripts/SESCA_bayes.py @spect CD_igg2.dat @lib DS-dTSC3 @corr SC_calc.out @par Bayes_1D_example.dat @write Bayes_est_2.out @proj Bayes_map_2.out @iter 250 @verb 3
# SESCA bayes module         CD spectrum        basis set       SC correction    parameter file            main output
#projection output    iterations verbosity

#results in estimated SS composition very similar to the deconvolution
#estimate, exactly because it ignores the likelihood of estimated scaling
#factors for the sampled SS compositions.

#In the second example file Bayes_2D_globular.dat, this connection is
#re-established by using a 2D probability distribution, and the prior SS
#probability is changed to a 3D custom distribution that mimics the SS
#probability distribution of globular proteins:

../../scripts/SESCA_bayes.py @spect CD_igg2.dat @lib DS-dTSC3 @corr SC_calc.out @par Bayes_2D_globular.dat @write Bayes_est_3.out @proj Bayes_map_3.out @iter 250 @verb 3
#SESCA bayes module          CD spectrum        basis set       SC correction    parameter file            main output
#projection output    iterations verbosity

#This SS estimation yields very similar results to what was calculated in
#Bayes_est_1.out, indicating that the prior SS distribution does not have
#a strong effect on the SS estimation outcome.

#Finally, the third parameter file was adapted to a different basis set,
#named HBSS-3SC1, which is based on five SS basis spectra. Consequently,
#the Bayesian parameter file Bayes_2D_HBSS-3SC1.dat now includes a 5D
#uniform SS prior, and the sampled SS compositions are projected to
#classes 1 (Helix_reg) and 3 (Beta_all). However, before the estimation
#may take place, the side chain corrections have to be calculated for
#this basis set manually using the command:

../../scripts/SESCA_pred.py @tar Seq_1igt.out          @lib ../../libs/Map_SC_HBSS-3SC1.dat @write SC_1igt_HBSS-3.out @mode 0
#  SESCA prediction module        Sequnce composition  side chain basis set                 output file             baisc prediction

#After this, the SS estimation is executed using the command:

../../scripts/SESCA_bayes.py @spect CD_igg2.dat @lib HBSS-3SC1 @corr SC_1igt_HBSS-3.out @par Bayes_2D_HBSS-3SC1.dat @write Bayes_est_4.out @proj Bayes_map_4.out @iter 250 @verb 3

#The obtained SS composition in Bayes_est_4.out produces a more detailed
#SS estimate that has large uncertainties on the fraction of turns in the
#protein, but corresponds well to previous estimates in terms of Alpha-
#helix and Beta-strand fractions.
